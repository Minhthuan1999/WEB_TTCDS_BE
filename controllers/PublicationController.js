// controllers/PublicationController.js
const moment = require('moment');
const fs = require('fs');   // üî• B·ªï sung d√≤ng n√†y
const Publication = require('../models/publicationModel');
const path = require('path');   
const Users = require('../models/userModel'); // th√™m

const fileURL = (name) => (name ? `/uploads/${name}` : null);


const UPLOAD_PUB_DIR = path.join(process.cwd(), 'uploads');


// Xo√° file an to√†n, kh√¥ng l·ªói n·∫øu kh√¥ng t·ªìn t·∫°i
async function removeFileIfExists(filename) {
  if (!filename) return;

  // ch·ªâ l·∫•y t√™n file, tr√°nh prefix th∆∞ m·ª•c
  const clean = path.basename(filename);
  const filePath = path.join(UPLOAD_PUB_DIR, clean);

  console.log(" ƒêang xo√° file:", filePath);

  try {
    await fs.promises.unlink(filePath);
    console.log("ƒê√£ xo√°:", filePath);
  } catch (err) {
    if (err.code === 'ENOENT') {
      console.warn("File kh√¥ng t·ªìn t·∫°i:", filePath);
    } else {
      console.error("L·ªói xo√° file:", err);
    }
  }
}

class PublicationController {
  // ===== SERIES (CHUY√äN ƒê·ªÄ)=====
// T·∫†O CHUY√äN ƒê·ªÄ
async createSeries(req, res) {
  try {
    const { title, name, description, status, posted_at } = req.body;
    if (!title || !name) return res.status(400).json({ message: 'Thi·∫øu d·ªØ li·ªáu' });

         // N·∫øu kh√¥ng c√≥ published_at t·ª´ body => l·∫•y ng√†y gi·ªù hi·ªán t·∫°i
    const seriesDate = posted_at 
      ? moment(posted_at, "DD-MM-YYYY").format("YYYY-MM-DD HH:mm:ss")
      : moment().format("YYYY-MM-DD HH:mm:ss");

    // const slug = slugify(name);

    const result = await Publication.createSeries({
      title,
      name,
      // slug,
      description,
      status: status || 'Hi·ªán',
      hero_image: req.files?.image?.[0]?.filename || null,
      posted_at: seriesDate
    });

    res.status(200).json({ success: true, message: "Th√™m chuy√™n ƒë·ªÅ th√†nh c√¥ng", series_id: result.insertId });
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: 'L·ªói' });
  }
}


// C·∫¨P NH·∫¨T CHUY√äN ƒê·ªÄ
async updateSeries(req, res) {
  try {
    const { title, name, description, status, posted_at } = req.body;

    const patch = {
      title,
      name,
      description,
      status,
      updated_at: moment().format("YYYY-MM-DD HH:mm:ss"),
      posted_at: posted_at
        ? moment(posted_at, "DD-MM-YYYY").format("YYYY-MM-DD HH:mm:ss")
        : moment().format("YYYY-MM-DD HH:mm:ss")  // t·ª± l·∫•y th·ªùi gian hi·ªán t·∫°i
    };

    if (req.files?.image?.[0]?.filename) {
      patch.hero_image = req.files.image[0].filename;
    }

    await Publication.updateSeries(req.params.id, patch);

    res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t chuy√™n ƒë·ªÅ th√†nh c√¥ng" });
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: "L·ªói" });
  }
}

// L·∫§Y T·∫§T C·∫¢ CHUY√äN ƒê·ªÄ
  async listSeries(req, res) {
    try {
      const rows = await Publication.listSeries();
      rows.forEach(r => r.hero_url = fileURL(r.hero_image));
      res.status(200).json(rows);
    } catch (e) { console.error(e); res.status(500).json({ message: 'L·ªói' }); }
  }

  // L·∫§Y 1 CHUY√äN ƒê·ªÄ
  async viewSeries(req, res) {
    try {
      const id = req.params.id;
      const s = await Publication.getSeriesById(id);
      if (!s) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y chuy√™n ƒë·ªÅ' });
      // +1 view khi m·ªü trang chuy√™n ƒë·ªÅ
      await Publication.bumpSeriesViews(id);

      res.status(200).json({ ...s, hero_url: fileURL(s.hero_image) });
    } catch (e) { console.error(e); res.status(500).json({ message: 'L·ªói' }); }
  }

  // X√ìA CHUY√äN ƒê·ªÄ
  async deleteSeries(req, res) {
        try {
            const { id } = req.params;
            if (!id) return res.status(400).json({ message: "Thi·∫øu ID chuy√™n ƒë·ªÅ" });

            const result = await Publication.deleteSeries(id);
            if (result.affectedRows === 0) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y chuy√™n ƒë·ªÅ" });
            }

            res.status(200).json({ success: true, message: "X√≥a chuy√™n ƒë·ªÅ th√†nh c√¥ng" });
        } catch (e) {
            console.error(e);
            res.status(500).json({ message: "L·ªói server" });
        }
    }





   
  // ===== ISSUES (K·ª≤ S·ªê ·∫§N PH·∫®M) =====
// T·∫†O ·∫§N PH·∫®M
async createIssue(req, res) {
  try {
    const { series_id, issue_no, published_at, status = 'Nh·∫≠p tin', userID } = req.body;
    if (!series_id || !issue_no) {
      return res.status(400).json({ message: 'Thi·∫øu series_id ho·∫∑c issue_no' });
    }
    if (!userID) {
      return res.status(400).json({ message: 'Thi·∫øu userID' });
    }

    const cover   = req.files?.image?.[0]?.filename || null;
    const pdf_file = req.files?.file?.[0]?.filename || null;

    // published_at: l·∫•y t·ª´ body ho·∫∑c m·∫∑c ƒë·ªãnh th·ªùi ƒëi·ªÉm hi·ªán t·∫°i
    const pubDate = published_at
      ? moment(published_at, 'DD-MM-YYYY').format('YYYY-MM-DD HH:mm:ss')
      : moment().format('YYYY-MM-DD HH:mm:ss');

    const rs = await Publication.createIssue({
      series_id,
      userID,               // ‚úÖ th√™m userID
      issue_no,
      cover,
      pdf_file,
      status,
      published_at: pubDate
    });

    res.status(200).json({
      success: true,
      message: status === 'Nh·∫≠p tin' ? 'L∆∞u th√†nh c√¥ng' : 'Chuy·ªÉn ƒëi th√†nh c√¥ng',
      pub_id: rs.insertId
    });
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: 'L·ªói' });
  }
}

  // C·∫¨P NH·∫¨T ·∫§N PH·∫®M
async updateIssue(req, res) {
  try {
    const { series_id, issue_no, published_at, status, userID } = req.body;
    const patch = {};

    if (series_id) patch.series_id = series_id;
    if (issue_no)  patch.issue_no  = issue_no;
    if (status)    patch.status    = status;
    if (userID)    patch.userID    = userID;  // ‚úÖ cho ph√©p c·∫≠p nh·∫≠t userID

    if (req.files?.image?.[0]?.filename) {
      patch.cover = req.files.image[0].filename;
    }
    if (req.files?.file?.[0]?.filename) {
      patch.pdf_file = req.files.file[0].filename;
    }

    if (published_at) {
      patch.published_at = moment(published_at, 'DD-MM-YYYY').format('YYYY-MM-DD HH:mm:ss');
    }

    await Publication.updateIssue(req.params.id, patch);

    res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t k·ª≥ s·ªë ·∫•n ph·∫©m th√†nh c√¥ng'
    });
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: 'L·ªói' });
  }
}

  // L·∫§Y 1 ·∫§N PH·∫®M
  async viewIssue(req, res) {
    try {
      const issue = await Publication.getIssueById(req.params.id);
      if (!issue) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y' });
      issue.cover_url = fileURL(issue.cover);
      issue.pdf_url   = fileURL(issue.pdf_file);

      const articles = await Publication.getArticlesByIssue(issue.pub_id);
      res.status(200).json({ issue, articles });
    } catch (e) { console.error(e); res.status(500).json({ message: 'L·ªói' }); }
  }


  // L·∫§Y TO√ÄN B·ªò ·∫§N PH·∫®M
  async listIssues(req, res) {
    try {
      const { series_id, page=1, limit=12, status } = req.query;
      const rows = await Publication.getIssues({ series_id, page, limit, status });
      rows.forEach(r => { r.cover_url = fileURL(r.cover); r.pdf_url = fileURL(r.pdf_file); });
      res.status(200).json(rows);
    } catch (e) { console.error(e); res.status(500).json({ message: 'L·ªói' }); }
  }

// L·∫§Y TO√ÄN B·ªò ·∫§N PH·∫®M (ADMIN)
async getIssuesAdmin(req, res) {
  try {
    const { series_id, page, limit, status } = req.query;
    const rs = await Publication.getIssuesAdmin({ series_id, page, limit, status });
    res.status(200).json(rs);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch ·∫•n ph·∫©m (Admin)" });
  }
}

// L·∫§Y S·ªê M·ªöI NH·∫§T + CHUY√äN M·ª§C ·∫§N PH·∫®M
  async latestIssue(req, res) {
  try {
    const { series_id } = req.query;

    // L·∫•y s·ªë m·ªõi nh·∫•t theo series ho·∫∑c to√†n h·ªá th·ªëng
    const issue = series_id
      ? await Publication.getLatestIssueBySeries(series_id)
      : await Publication.getLatestIssue();

    if (!issue) return res.status(404).json({ message: 'Ch∆∞a c√≥ s·ªë ƒë√£ duy·ªát' });

    // L·∫•y b√†i + t√™n chuy√™n m·ª•c
    const rows = await Publication.getArticlesByIssueWithCategory(issue.pub_id);

    // Nh√≥m theo chuy√™n m·ª•c ƒë·ªÉ FE render c·ªôt b√™n ph·∫£i
    const groups = {};
    for (const r of rows) {
      const key = r.pc_id || 0;
      if (!groups[key]) groups[key] = { pc_id: r.pc_id || 0, name: r.category_name || 'Kh√°c', articles: [] };
      groups[key].articles.push({
        article_id: r.article_id,
        title: r.title,
        summary: r.summary,
        has_audio: !!(r.audio_file || r.audio_url)
      });
    }

    // Tr·∫£ ƒë√∫ng ph·∫ßn ‚Äús·ªë m·ªõi nh·∫•t‚Äù
    return res.status(200).json({
      pub_id: issue.pub_id,
      userID: issue.userID,
      series_id: issue.series_id,
      series_name: issue.series_name,
      issue_no: issue.issue_no,
      cover_url: fileURL(issue.cover),
      pdf_url: fileURL(issue.pdf_file),
      published_at: issue.published_at,
      updated_by: issue.updated_by,
      outline: Object.values(groups)
    });
  } catch (e) { console.error(e); res.status(500).json({ message: 'L·ªói' }); }
}


// L·∫§Y C√ÅC S·ªê K·ª≤ TR∆Ø·ªöC
async previousIssuesFull(req, res) {
  try {
    const { series_id } = req.query;
    if (!series_id) return res.status(400).json({ message: 'Thi·∫øu series_id' });

    const limit  = req.query.limit ? Number(req.query.limit) : null;
    const status = req.query.status || null;        // null = kh√¥ng l·ªçc tr·∫°ng th√°i

    // t·ª± t√¨m s·ªë m·ªõi nh·∫•t ƒë·ªÉ lo·∫°i tr·ª´
    const latest = await Publication.getLatestIssueBySeries(series_id, status);
    const exclude_pub_id = latest?.pub_id || null;

    // l·∫•y danh s√°ch "c√°c s·ªë tr∆∞·ªõc"
    const issues = await Publication.getIssuesBySeries(series_id, {
      exclude_pub_id,
      limit,
      status
    });

    if (issues.length === 0) {
      return res.status(200).json({ series_id: Number(series_id), previous: [] });
    }

    // l·∫•y to√†n b·ªô b√†i c·ªßa c√°c k·ª≥ ƒë√≥ (1 query)
    const pubIds   = issues.map(i => i.pub_id);
    const rows     = await Publication.getArticlesByIssuesWithCategory(pubIds, 'ƒê√£ duy·ªát'); // ho·∫∑c d√πng 'status' n·∫øu mu·ªën ƒë·ªìng b·ªô
    const byPubMap = {};

    // group theo pub_id -> pc_id
    for (const r of rows) {
      if (!byPubMap[r.pub_id]) byPubMap[r.pub_id] = {};
      const key = r.pc_id || 0;
      if (!byPubMap[r.pub_id][key]) {
        byPubMap[r.pub_id][key] = { pc_id: r.pc_id || 0, name: r.category_name || 'Kh√°c', articles: [] };
      }
      byPubMap[r.pub_id][key].articles.push({
        article_id: r.article_id,
        title: r.title,
        summary: r.summary,
        has_audio: !!(r.audio_file || r.audio_url)
      });
    }

    const previous = issues.map(p => ({
      pub_id: p.pub_id,
      userID: p.userID,
      issue_no: p.issue_no,
      series_id: p.series_id,
      series_name: p.series_name,
      cover_url: p.cover ? `/uploads/${p.cover}` : null,
      pdf_url: p.pdf_file ? `/uploads/${p.pdf_file}` : null,
      updated_by: p.updated_by,
      published_at: p.published_at,
      outline: Object.values(byPubMap[p.pub_id] || {})   // <<==== ph·∫ßn b√™n ph·∫£i b·∫°n c·∫ßn
    }));

    return res.status(200).json({ series_id: Number(series_id), previous });
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: 'L·ªói' });
  }
}


// X√ìA S·ªê ·∫§N PH·∫®M
  async deleteIssue(req, res) {
    try {
      const id = req.params.id;
      const { cascade = '0' } = req.query;

      const issue = await Publication.getIssueById(id);
      if (!issue) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ·∫•n ph·∫©m' });

      // ki·ªÉm tra c√≤n b√†i kh√¥ng
      const { total } = await Publication.countArticlesByIssue(id);
      if (Number(total) > 0 && cascade !== '1') {
        return res.status(409).json({
          message: '·∫§n ph·∫©m c√≤n b√†i vi·∫øt, kh√¥ng th·ªÉ xo√°. G·ªçi l·∫°i v·ªõi ?cascade=1 ƒë·ªÉ xo√° k√®m c√°c b√†i.',
          articles: Number(total)
        });
      }

      // xo√° b√†i n·∫øu cascade
      if (Number(total) > 0 && cascade === '1') {
        await Publication.deleteArticlesByIssue(id);
      }

      // xo√° ·∫•n ph·∫©m
      const rs = await Publication.deleteIssue(id);
      if (rs.affectedRows === 0) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ·∫•n ph·∫©m' });

      // xo√° file cover & pdf
      await removeFileIfExists(issue.cover);
      await removeFileIfExists(issue.pdf_file);

      return res.status(200).json({
        success: true,
        message: 'X√≥a th√†nh c√¥ng',
        deleted_articles: Number(total)
      });
    } catch (e) {
      console.error(e);
      res.status(500).json({ message: 'L·ªói' });
    }
  }

// l·∫•y t·∫•t c·∫£ ·∫•n ph·∫©m c·ªßa 1 user
  async getIssuesByUser(req, res) {
  try {
    // cho ph√©p nh·∫≠n userID t·ª´ params ho·∫∑c query
    const userID = req.params.userID || req.query.userID;
    if (!userID) return res.status(400).json({ message: 'Thi·∫øu userID' });

    const page      = Number(req.query.page  || 1);
    const limit     = Number(req.query.limit || 12);
    const status    = req.query.status || null;     // 'ƒê√£ duy·ªát' / 'Ch·ªù duy·ªát' / 'T·ª´ ch·ªëi' ...
    const series_id = req.query.series_id || null;  // n·∫øu mu·ªën l·ªçc theo series

    const rows = await Publication.getIssuesByUser({
      userID, page, limit, status, series_id
    });

    // (tu·ª≥ ch·ªçn) map ra URL cho cover/pdf n·∫øu b·∫°n c√≥ helper fileURL(...)
    // const data = rows.map(r => ({
    //   ...r,
    //   cover_url: fileURL(r.cover),
    //   pdf_url:   fileURL(r.pdf_file)
    // }));

    res.status(200).json(rows);
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: 'L·ªói' });
  }
}

  // ===== ARTICLES (B√ÄI/PH·∫¶N ·∫§N PH·∫®M)=====
//   // T·∫†O B√ÄI ·∫§N PH·∫®M
  async createArticle(req, res) {
    try {
      const { pub_id, userID, pc_id, title, summary, content, sort_order=0, status='Nh·∫≠p tin', audio_url } = req.body;
      if (!pub_id || !title) return res.status(400).json({ message: 'Thi·∫øu pub_id/title' });

      const image = req.files?.image?.[0]?.filename || null;
      const audio_file = req.files?.audio?.[0]?.filename || null;
// t·ª± l·∫•y username t·ª´ userID ƒë·ªÉ ghi updated_by
    let updated_by = null;
    if (userID) {
      const uid = parseInt(userID, 10);
      if (!Number.isNaN(uid)) {
        const u = await Users.getById(uid);
        if (u) updated_by = u.username || u.name || String(uid);
      }
    }

      const rs = await Publication.createArticle({
        pub_id, userID, pc_id: pc_id || null, title, summary, content,
        image, audio_file, audio_url: audio_url || null, updated_by, 
        sort_order: Number(sort_order), status
      });
      res.status(200).json({ success: true, message: status === 'Nh√°p tin' ? 'L∆∞u th√†nh c√¥ng' : 'Chuy·ªÉn ƒëi th√†nh c√¥ng', article_id: rs.insertId });
    } catch (e) { console.error(e); res.status(500).json({ message: 'L·ªói' }); }
  }



// C·∫¨P NH·∫¨T B√ÄI ·∫§N PH·∫®M


  async updateArticle(req, res) {
  try {
    const id = Number(req.params.id);

    const {
      pub_id, userID, pc_id, title, summary, content,
      sort_order, status, audio_url,
      updated_by: updatedByClient // ‚Üê t√™n kh√°c, kh√¥ng ƒë·ª•ng v√†o bi·∫øn k·∫øt qu·∫£
    } = req.body;

    // build patch t·ª´ng ph·∫ßn, kh√¥ng tham chi·∫øu bi·∫øn ch∆∞a c√≥
    const patch = {
      pub_id,
      pc_id,
      title,
      summary,
      content,
      status,
      audio_url
    };
    if (sort_order !== undefined) patch.sort_order = Number(sort_order);
    if (req.files?.image?.[0]) patch.image = req.files.image[0].filename;
    if (req.files?.audio?.[0]) patch.audio_file = req.files.audio[0].filename;

    // Quy·∫øt ƒë·ªãnh updated_by:
    // 1) N·∫øu client g·ª≠i chu·ªói updated_by ‚Üí d√πng lu√¥n
    // 2) N·∫øu kh√¥ng, m√† c√≥ userID ‚Üí tra username theo userID
    let finalUpdatedBy;
    if (updatedByClient && String(updatedByClient).trim() !== '') {
      finalUpdatedBy = String(updatedByClient).trim();
    } else if (userID) {
      const u = await Users.getById(parseInt(userID, 10));
      if (u) finalUpdatedBy = u.username || u.name || String(userID);
    }
    if (finalUpdatedBy !== undefined) patch.updated_by = finalUpdatedBy;

    // xo√° c√°c key undefined ƒë·ªÉ tr√°nh set NULL ngo√†i √Ω mu·ªën
    Object.keys(patch).forEach(k => patch[k] === undefined && delete patch[k]);

    await Publication.updateArticle(id, patch);
    return res.status(200).json({ success: true, message: 'C·∫≠p nh·∫≠t b√†i ·∫•n ph·∫©m th√†nh c√¥ng' });
  } catch (e) {
    console.error(e);
    return res.status(500).json({ message: 'L·ªói' });
  }
}

// L·∫§Y DANH S√ÅCH B√ÄI/‚ÄúPH·∫¶N‚Äù THU·ªòC 1 K·ª≤ ·∫§N PH·∫®M
  async getArticlesByIssue(req, res) {
    try {
      const rows = await Publication.getArticlesByIssue(req.params.pub_id);
      res.status(200).json(rows);
    } catch (e) { console.error(e); res.status(500).json({ message: 'L·ªói' }); }
  }


// L·∫§Y CHI TI·∫æT 1 B√ÄI (t·ª± +1 view tr∆∞·ªõc r·ªìi l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t)
async getArticleById(req, res) {
  try {
    const id = Number(req.params.id);

    await Publication.bumpArticleViews(id);        // +1 view
    const row = await Publication.getArticleById(id);
    if (!row) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i' });

    row.image_url      = fileURL(row.image);
    row.audio_file_url = fileURL(row.audio_file);

    return res.status(200).json(row);
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: 'L·ªói' });
  }
}




// L·∫§Y B√ÄI THEO CHUY√äN M·ª§C.
  async getByCategory(req, res) {
    try {
      const { pc_id } = req.params;
      const { pub_id } = req.query;
      const rows = await Publication.getArticlesByCategory(pc_id, pub_id);
      res.status(200).json(rows);
    } catch (e) { console.error(e); res.status(500).json({ message: 'L·ªói' }); }
  }

// T√åM KI·∫æM B√ÄI PH·∫¶N ·∫§N PH·∫®M
  async search(req, res) {
    try {
      const { q='' } = req.query;
      const rows = await Publication.searchArticles(q);
      res.status(200).json(rows);
    } catch (e) { console.error(e); res.status(500).json({ message: 'L·ªói' }); }
  }

// X√ìA B√ÄI/PH·∫¶N ·∫§N PH·∫®M
  async deleteArticle(req, res) {
    try {
      const id = req.params.id;

      const art = await Publication.getArticleById(id);
      if (!art) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i' });

      const rs = await Publication.deleteArticle(id);
      if (rs.affectedRows === 0) return res.status(404).json({ message: 'Kh√¥ng c√≥ g√¨ ƒë·ªÉ xo√°' });

      // Xo√° file ƒë√≠nh k√®m n·∫øu c√≥
      await removeFileIfExists(art.image);
      await removeFileIfExists(art.audio_file);

      return res.status(200).json({ success: true,message: 'X√≥a b√†i ·∫•n ph·∫©m th√†nh c√¥ng', deleted_id: Number(id) });
    } catch (e) {
      console.error(e);
      return res.status(500).json({ message: 'L·ªói' });
    }
  }

    // L·∫§Y B√ÄI ·∫§N PH·∫®M THEO USER T·∫†O
async getByUserCreate(req, res) {
  try {
    const posts = await Publication.getByUserCreate(req.params.id);
    res.json(posts);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói" });
  }
}

  // GET t·∫•t c·∫£ b√†i theo 1 k·ª≥ ·∫•n ph·∫©m (ADMIN)
async getAllByIssueAdmin(req, res) {
  try {
    const posts = await Publication.getAllByIssueAdmin(req.params.id);
    res.json(posts);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói" });
  }
}


//     // --------- CATEGORIES (DANH M·ª§C ·∫§N PH·∫®M) ----------
//     // L·∫§Y T·∫§T C·∫¢ CHUY√äN M·ª§C
//   async listCategories(req, res) {
//     try {
//       const { series_id } = req.query;
//       const rows = await Publication.listCategories(series_id || null);
//       res.status(200).json(rows);
//     } catch (e) { console.error(e); res.status(500).json({ message: 'L·ªói' }); }
//   }
// // L·∫§Y 1 DANH M·ª§C
//   async getCategory(req, res) {
//     try {
//       const row = await Publication.getCategoryById(req.params.id);
//       if (!row) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y' });
//       res.status(200).json(row);
//     } catch (e) { console.error(e); res.status(500).json({ message: 'L·ªói' }); }
//   }
// // T·∫†O DANH M·ª§C
//   async createCategory(req, res) {
//     try {
//       const { pub_id, name, description } = req.body;
//       if (!pub_id || !name) return res.status(400).json({ message: 'Thi·∫øu pub_id ho·∫∑c name' });
//       const rs = await Publication.createCategory({
//         pub_id,
//         name,
//         // slug,
//         description,
//         created_at: moment().format('YYYY-MM-DD HH:mm:ss'),
//       });
//      res.status(200).json({ success: true, message: 'T·∫°o Danh m·ª•c th√†nh c√¥ng', pc_id: rs.insertId });
//     } catch (e) { console.error(e); res.status(500).json({ message: 'L·ªói' }); }
//   }

// // C·∫¨P NH·∫¨T DANH M·ª§C
//   async updateCategory(req, res) {
//     try {
//       const { pub_id, name, description } = req.body;
//       const id = req.params.id;
//       if (!pub_id || !name) return res.status(400).json({ message: 'Thi·∫øu pub_id ho·∫∑c name' });

//       await Publication.updateCategory(id, {
//         pub_id,
//         name,
//         // slug,
//         description,
//       });

//       res.status(200).json({ success: true, message: 'C·∫≠p nh·∫≠t Danh m·ª•c th√†nh c√¥ng', });
//     } catch (e) {
//       console.error(e);
//       if (e && e.code === 'ER_DUP_ENTRY')
//         return res.status(409).json({ message: 'Slug ƒë√£ t·ªìn t·∫°i trong series n√†y' });
//       res.status(500).json({ message: 'L·ªói' });
//     }
//   }

//   // X√ìA DANH M·ª§C
//   async deleteCategory(req, res) {
//     try {
//       const id = req.params.id;
//       const { cascade = '0' } = req.query;

//       // c√≤n b√†i vi·∫øt th√¨ tu·ª≥ ch·ªçn xo√° k√®m
//       const { total } = await Publication.countArticlesByCategory(id);
//       if (Number(total) > 0 && cascade !== '1') {
//         return res.status(409).json({
//           message: 'Chuy√™n m·ª•c c√≤n b√†i vi·∫øt, kh√¥ng th·ªÉ xo√°. G·ªçi l·∫°i v·ªõi ?cascade=1 ƒë·ªÉ xo√° k√®m c√°c b√†i.',
//           articles: Number(total)
//         });
//       }

//       if (Number(total) > 0) {
//         await Publication.deleteArticlesByCategory(id);
//       }

//       const rs = await Publication.deleteCategory(id);
//       if (rs.affectedRows === 0) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y' });

//       res.status(200).json({ success: true, message: 'X√≥a Danh m·ª•c th√†nh c√¥ng',  deleted_articles: Number(total) });
//     } catch (e) { console.error(e); res.status(500).json({ message: 'L·ªói' }); }
//   }

  // --------- CATEGORIES (DANH M·ª§C ·∫§N PH·∫®M) --------- ƒë√£ b·ªè pub_id

// L·∫§Y T·∫§T C·∫¢ DANH M·ª§C
async listCategories(req, res) {
  try {
    const rows = await Publication.listCategories();
    res.status(200).json(rows);
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: 'L·ªói' });
  }
}

// L·∫§Y 1 DANH M·ª§C
async getCategory(req, res) {
  try {
    const row = await Publication.getCategoryById(req.params.id);
    if (!row) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y' });
    res.status(200).json(row);
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: 'L·ªói' });
  }
}

// T·∫†O DANH M·ª§C  (KH√îNG C√íN pub_id)
async createCategory(req, res) {
  try {
    const { name, description } = req.body;
    if (!name) return res.status(400).json({ message: 'Thi·∫øu name' });

    const created_at = moment().format('YYYY-MM-DD HH:mm:ss');

    const rs = await Publication.createCategory({ name, description, created_at });
    res.status(200).json({ success: true, message: 'T·∫°o Danh m·ª•c th√†nh c√¥ng', pc_id: rs.insertId });
  } catch (e) {
    console.error(e);
    // n·∫øu c√≥ UNIQUE name -> ER_DUP_ENTRY
    if (e && e.code === 'ER_DUP_ENTRY') {
      return res.status(409).json({ message: 'T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i' });
    }
    res.status(500).json({ message: 'L·ªói' });
  }
}

// C·∫¨P NH·∫¨T DANH M·ª§C
async updateCategory(req, res) {
  try {
    const id = req.params.id;
    const { name, description } = req.body;
    if (!name) return res.status(400).json({ message: 'Thi·∫øu name' });

    await Publication.updateCategory(id, { name, description });
    res.status(200).json({ success: true, message: 'C·∫≠p nh·∫≠t Danh m·ª•c th√†nh c√¥ng' });
  } catch (e) {
    console.error(e);
    if (e && e.code === 'ER_DUP_ENTRY') {
      return res.status(409).json({ message: 'T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i' });
    }
    res.status(500).json({ message: 'L·ªói' });
  }
}

// XO√Å DANH M·ª§C
// - M·∫∑c ƒë·ªãnh: n·∫øu c√≤n b√†i -> tr·∫£ 409
// - N·∫øu ?force=1 -> xo√° h·∫øt b√†i trong danh m·ª•c r·ªìi xo√° danh m·ª•c
async deleteCategory(req, res) {
  try {
    const id = req.params.id;
    const cascade = String(req.query.cascade || '') === '1';

    const { total } = await Publication.countArticlesByCategory(id);
    if (total > 0 && !cascade) {
      return res.status(409).json({
        success: false,
        message: `Danh m·ª•c c√≤n ${total} b√†i. Th√™m ?cascade=1 ƒë·ªÉ xo√° c√πng c√°c b√†i.`
      });
    }

    if (total > 0 && cascade) {
      await Publication.deleteArticlesByCategory(id);
    }

    await Publication.deleteCategory(id);
    res.status(200).json({ success: true, message: 'ƒê√£ xo√° danh m·ª•c' });
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: 'L·ªói' });
  }
}



// T√∫ y√™u c·∫ßu
 // T·∫†O B√ÄI/PH·∫¶N THEO pub_id ·ªû PATH
  async createArticleByPub(req, res) {
    try {
      const pub_id = Number(req.params.pub_id);
      const {
        userID,           // b·∫Øt bu·ªôc (ƒë·ªÉ ghi updated_by t·ª± ƒë·ªông)
        pc_id,            // c√≥ th·ªÉ null
        title,            // b·∫Øt bu·ªôc
        summary,          // m√¥ t·∫£ ng·∫Øn
        content,          // n·ªôi dung
        sort_order = 0,   // s·ªë th·ª© t·ª± hi·ªÉn th·ªã (tƒÉng d·∫ßn)
        status = 'Nh·∫≠p tin',  // 'Nh√°p' | 'ƒê√£ duy·ªát' | ‚Ä¶
        audio_url,
        date      // link audio ngo√†i (n·∫øu c√≥)
      } = req.body;

      if (!pub_id || !userID || !title) {
        return res.status(400).json({ message: 'Thi·∫øu pub_id/userID/title' });
      }

      // file ƒë√≠nh k√®m
      const image = req.files?.image?.[0]?.filename || null;
      const audio_file = req.files?.audio?.[0]?.filename || null;

      // N·∫øu kh√¥ng c√≥ published_at t·ª´ body => l·∫•y ng√†y gi·ªù hi·ªán t·∫°i
    const pubDate = date
      ? moment(date, "DD-MM-YYYY").format("YYYY-MM-DD HH:mm:ss")
      : moment().format("YYYY-MM-DD HH:mm:ss");

      // l·∫•y username ƒë·ªÉ set updated_by
      const username = await Publication.getUsernameByUserId(userID);

      const rs = await Publication.createArticle({
        pub_id,
        userID,
        pc_id: pc_id || null,
        title,
        summary,
        content,
        image,
        audio_file,
        audio_url: audio_url || null,
        sort_order: Number(sort_order) || 0,
        status,
        updated_by: username || null,
        date: pubDate
      });

      return res
        .status(200)
        .json({ success: true, message: status === 'Nh√°p tin' ? 'L∆∞u th√†nh c√¥ng' : 'Chuy·ªÉn ƒëi th√†nh c√¥ng', article_id: rs.insertId });
    } catch (e) {
      console.error(e);
      return res.status(500).json({ message: 'L·ªói' });
    }
  }

   // C·∫¨P NH·∫¨T B√ÄI/PH·∫¶N THEO pub_id + article_id
  // -------------------------
  async updateArticleByPub(req, res) {
    try {
      const pub_id = Number(req.params.pub_id);
      const article_id = Number(req.params.article_id);

      if (!pub_id || !article_id) {
        return res.status(400).json({ message: 'Thi·∫øu pub_id/article_id' });
      }

      const {
        userID,        // ƒë·ªÉ set updated_by t·ª± ƒë·ªông (n·∫øu c√≥)
        pc_id,
        title,
        summary,
        content,
        sort_order,
        status,
        audio_url,
        date
      } = req.body;

      const image = req.files?.image?.[0]?.filename || null;
      const audio_file = req.files?.audio?.[0]?.filename || null;

      // N·∫øu kh√¥ng c√≥ published_at t·ª´ body => l·∫•y ng√†y gi·ªù hi·ªán t·∫°i
    const pubDate = date
      ? moment(date, "DD-MM-YYYY").format("YYYY-MM-DD HH:mm:ss")
      : moment().format("YYYY-MM-DD HH:mm:ss");

      let updated_by = null;
      if (userID) {
        updated_by = await Publication.getUsernameByUserId(userID);
      }

      const payload = {
        pc_id: pc_id ?? undefined,                 // undefined = kh√¥ng c·∫≠p nh·∫≠t c·ªôt
        title: title ?? undefined,
        summary: summary ?? undefined,
        content: content ?? undefined,
        sort_order: (sort_order !== undefined ? Number(sort_order) : undefined),
        status: status ?? undefined,
        audio_url: audio_url ?? undefined,
        image: image ?? undefined,                 // ch·ªâ c·∫≠p nh·∫≠t khi c√≥ file m·ªõi
        audio_file: audio_file ?? undefined,
        updated_by: updated_by ?? undefined,
        date: pubDate 
      };

      const rs = await Publication.updateArticleByPub(article_id, pub_id, payload);

      if (rs.affectedRows === 0) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i ƒë·ªÉ c·∫≠p nh·∫≠t' });
      }

      return res.status(200).json({ success: true, message: 'C·∫≠p nh·∫≠t b√†i th√†nh c√¥ng' });
    } catch (e) {
      console.error(e);
      return res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t b√†i' });
    }
  }

  // -------------------------
  // XO√Å B√ÄI/PH·∫¶N THEO pub_id + article_id
  // -------------------------
  async deleteArticleByPub(req, res) {
    try {
      const pub_id = Number(req.params.pub_id);
      const article_id = Number(req.params.article_id);

      if (!pub_id || !article_id) {
        return res.status(400).json({ message: 'Thi·∫øu pub_id/article_id' });
      }

      const art = await Publication.getArticleById(article_id);
      if (!art) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i' });


      const rs = await Publication.deleteArticleByPub(article_id, pub_id);
      if (rs.affectedRows === 0) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i ƒë·ªÉ xo√°' });
      }
           // Xo√° file ƒë√≠nh k√®m n·∫øu c√≥
      await removeFileIfExists(art.image);
      await removeFileIfExists(art.audio_file);


      return res.status(200).json({ success: true, message: 'Xo√° b√†i th√†nh c√¥ng' });
    } catch (e) {
      console.error(e);
      return res.status(500).json({ message: 'L·ªói server khi xo√° b√†i' });
    }
  }


  // L·∫§Y CHI TI·∫æT 1 B√ÄI THEO PUB + ID (m·ªõi)
async getArticleByPubAndId(req, res) {
  try {
    const pub_id = Number(req.params.pub_id);
    const id     = Number(req.params.article_id);

    await Publication.bumpArticleViewsByPub(pub_id, id); // +1 view

    const row = await Publication.getArticleByPubAndId(pub_id, id);
    if (!row) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i" });

    row.image_url      = fileURL(row.image);
    row.audio_file_url = fileURL(row.audio_file);

    return res.status(200).json(row);
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: "L·ªói" });
  }
}

// L·∫§Y B√ÄI THEO CHUY√äN M·ª§C + PUB (m·ªõi)
async getByCategoryByPub(req, res) {
  try {
    const pc_id  = Number(req.params.pc_id);
    const pub_id = Number(req.params.pub_id);

    const rows = await Publication.getArticlesByCategoryByPub(pc_id, pub_id);

    // (tu·ª≥ ch·ªçn) map URL file cho ti·ªán d√πng ·ªü FE
    for (const r of rows) {
      r.image_url      = fileURL(r.image, req);
      r.audio_file_url = fileURL(r.audio_file, req);
    }

    return res.status(200).json(rows);
  } catch (e) {
    console.error(e);
    return res.status(500).json({ message: "L·ªói" });
  }
}
}



module.exports = new PublicationController();
